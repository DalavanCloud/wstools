#!/usr/bin/python

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import os
import sys
import codecs
from argparse import ArgumentParser
from subprocess import check_output
from StringIO import StringIO
from xml.etree import ElementTree as et
from datetime import datetime

try:
    from sldr.ldml import Ldml, flattenlocale
except ImportError:
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'sldr', 'python', 'lib')))
    from sldr.ldml import Ldml, flattenlocale, etwrite
    from sldr.ldml_exemplars import Exemplars

def main():
    parser = ArgumentParser()
    parser.add_argument('this', help='File of interest')
    parser.add_argument('corpus', help='Corpus to read')
    parser.add_argument('-o','--output', help="Output file")
    args = parser.parse_args()

    exemplars = Exemplars()
    corpus = codecs.open(args.corpus, 'r', encoding='utf-8')
    for line in corpus:
        exemplars.process(line)
    print exemplars.get_main()
    print exemplars.get_auxiliary()
    print exemplars.get_index()
    print exemplars.get_punctuation()

    this = Ldml(args.this)

    if not args.output :
        outfh = sys.stdout
    else :
        outfh = codecs.open(outf, "w", encoding="utf-8")

    this.serialize_xml(outfh.write)

    if args.output :
        outfh.close()


if __name__ == '__main__':
    main()
