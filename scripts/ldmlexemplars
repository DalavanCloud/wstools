#!/usr/bin/python

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import os, os.path
import sys
import codecs
from argparse import ArgumentParser
from icu import UNICODE_VERSION, ICU_VERSION, VERSION
import palaso.sfm as sfm
from palaso.sfm import usfm, style

try:
    from wstools.dbl import DBL
except ImportError:
    sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'lib', 'wstools')))
    from dbl import DBL


def main():
    parser = ArgumentParser(
        description='Find exemplars for LDML files')
    parser.add_argument('project', nargs='+', help='DBL project zip file')
    parser.add_argument('--version', action='version',
                        version='%(prog)s: Unicode: {} ICU: {} PyICU: {}'.format(UNICODE_VERSION,
                                                                                 ICU_VERSION,
                                                                                 VERSION))
    args = parser.parse_args()

    dbl = DBL()

    # The following are examples of how to set the lists of exemplars
    # from content taken from a LDML file. Other settings can be changed
    # as well. If a LDML file has no exemplar information for a particular set,
    # there is no need to initialize the Exemplar class with an empty set.

    # User settable configuration.
    dbl.exemplars.many_bases = 5
    dbl.exemplars.frequent = 10

    # From existing LDML files.
    dbl.exemplars.main = '[]'
    dbl.exemplars.auxiliary = '[]'
    dbl.exemplars.index = '[]'
    dbl.exemplars.punctuation = '[]'
    dbl.exemplars.digits = '[]'

    # Find exemplars in the data.
    ldml_filename = ''
    for project in args.project:
        ldml_filename = os.path.normcase(project)
        src_type = os.path.splitext(ldml_filename)[1].lower()
        if src_type == '.zip':
            dbl.open_project(project)
            dbl.process_project()
            dbl.close_project()
        else:
            with codecs.open(project, 'r', encoding='utf_8_sig') as source:
                if src_type.endswith('sfm'):
                    doc = sfm.sfilter(text_for_exemplars, usfm.parser(source))
                    txt = ''.join(_flatten(doc))
                    with codecs.open(project + '.text', 'w', encoding='utf-8') as textfile:
                        textfile.write(txt)
                        dbl.exemplars.process(txt)
                else:
                    for line in source:
                        dbl.exemplars.process(line)
    dbl.analyze_projects()

    # Display the exemplars.
    with codecs.open(ldml_filename + '.ldml', 'w', encoding='utf-8') as ldml_file:
        ldml_file.write(' '.join(args.project) + '\n')
        ldml_file.write(dbl.exemplars.main + '\n')
        ldml_file.write(dbl.exemplars.auxiliary + '\n')
        ldml_file.write(dbl.exemplars.index + '\n')
        ldml_file.write(dbl.exemplars.punctuation + '\n')
        ldml_file.write(dbl.exemplars.digits + '\n')
        ldml_file.write(dbl.exemplars.graphemes + '\n')
        ldml_file.write(dbl.exemplars.script + '\n')


def text_for_exemplars(e, props=set(("publishable", "vernacular"))):
    es = set(e.meta.get('TextProperties', []))
    return "note" not in es and props <= es


def _flatten(doc):
    return sfm.sreduce(lambda e,ts,_: ts,
                       lambda e,ts: ts.append(e) or ts,
                       doc, [])


if __name__ == '__main__':
    main()
