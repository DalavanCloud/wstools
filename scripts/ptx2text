#!/usr/bin/python2

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import codecs
from argparse import ArgumentParser
import palaso.sfm as sfm
from palaso.sfm import usfm, style


def main():
    parser = ArgumentParser(
        description='Extract text from USFM files')
    parser.add_argument('ptx', nargs='+', help='USFM file')
    parser.add_argument('--version', action='version', version='%(prog)s: 0.1')
    args = parser.parse_args()

    # Extract text.
    for ptx in args.ptx:
        with codecs.open(ptx, 'r', encoding='utf_8_sig') as source:
            doc = sfm.sfilter(text_for_exemplars, usfm.parser(source))
            txt = ''.join(_flatten(doc))
            with codecs.open(ptx + '.text', 'w', encoding='utf-8') as textfile:
                textfile.write(txt)


def text_for_exemplars(e, props={"publishable", "vernacular"}):
    es = set(e.meta.get('TextProperties', []))
    return "note" not in es and props <= es


def _flatten(doc):
    return sfm.sreduce(lambda e, ts, _: ts,
                       lambda e, ts: ts.append(e) or ts,
                       doc, [])


if __name__ == '__main__':
    main()
